@startuml Report Occurrence
package "Occurrences"{
(Report Occurrence)
}
actor :Mentor:
Mentor "0..1" -- (Report Occurrence)
@enduml

# Participating Actors

- Mentor (unless the Occurrence is being reported automatically; e.g., by MarkMentorAsAbsent or MarkMentorAsTardy)

# Preconditions

- The Mentor is authenticated

# Flow of Events

1. The Mentor clicks a "Report Occurrence" button
2. The system displays a form with the Occurrence Type, description, subject, date, and whether to submit the Occurrence anonymously
3. The Mentor fills out the fields
4. The Mentor clicks on a "Submit" button
5. The system displays a confirmation message

# Alternative Flow of Events

4a. The Mentor clicks a "Cancel" button
5a. The system prompts the Mentor if they are sure they want to discard the Occurrence
6a. The Mentor clicks a "Yes" button
7a. The system discards the Occurrence and displays a confirmation message
6b. The Mentor clicks a "No" button
7b. The system returns the Mentor to the form

@startuml Report Occurrence Object Model
class ReportOccurrence <<control>> {}
class ReportOccurrenceForm <<boundary>> {
  + subject: String
  + description: String
  + date: DateOnly
  + isAnonymous: Boolean
}
class Occurrence <<entity>> {
  + subject: String
  + description: String
  + date: DateOnly
  + isAnonymous: Boolean
  + mentor: Mentor
  + type: OccurrenceType
}
ReportOccurrence --> ReportOccurrenceForm
ReportOccurrence --> Occurrence : Creates >
Occurrence --> OccurrenceType
Occurrence --> Mentor
@enduml